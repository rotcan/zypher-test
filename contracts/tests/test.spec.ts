import { HardhatEthersSigner } from "@nomicfoundation/hardhat-ethers/signers";
import { TestZypher } from "../typechain-types/contracts/TestZypher";
import { expect } from "chai";
import * as hre from "hardhat";
import { BigNumberish, ContractTransactionResponse } from "ethers";
import {anyValue} from "@nomicfoundation/hardhat-chai-matchers/withArgs";
import * as SE from '@zypher-game/secret-engine';
import { RevealVerifier, ShuffleService } from "../typechain-types";

const deckSize=20;
type Contract<T> = T & { deploymentTransaction(): ContractTransactionResponse; }; 

describe('init',()=>{
    let TestZypherMock: Contract<TestZypher>;
    let MockRevealVerifier: Contract<RevealVerifier>;
    let MockShuffleVerifier:Contract<ShuffleService>;
    
    async function createMockVerifiers(){
        const deck_num = deckSize;
        const RevealVerifier=await hre.ethers.getContractFactory('RevealVerifier');
        MockRevealVerifier=await RevealVerifier.deploy();

        const VerifierKeyExtra1_20=await hre.ethers.getContractFactory("VerifierKeyExtra1_20");
        const verifierKeyExtra1_20=await VerifierKeyExtra1_20.deploy();

        const VerifierKeyExtra2_20=await hre.ethers.getContractFactory("VerifierKeyExtra2_20");
        const verifierKeyExtra2_20=await VerifierKeyExtra2_20.deploy();
        
        const ShuffleVerifier=await hre.ethers.getContractFactory('ShuffleService');
        MockShuffleVerifier=await ShuffleVerifier.deploy(await verifierKeyExtra1_20.getAddress(),
            await verifierKeyExtra2_20.getAddress(),deck_num);

        //return {MockRevealVerifier,MockShuffleVerifier};
    }

    async function loadZypher() {
        let Game=await hre.ethers.getContractFactory("TestZypher");
        TestZypherMock=await Game.deploy((await MockShuffleVerifier.getAddress()),(await MockRevealVerifier.getAddress()));
    }

    beforeEach(async()=>{
        await createMockVerifiers();
        await loadZypher();
    })

    it('Zypher JS test',async()=>{
        const [_owner,p1,p2]=await hre.ethers.getSigners();
        const keys=[{ 
            sk: "0x020b31a672b203b71241031c8ea5e5a4ef133c57bcde822ac514e8a1c7f89124", 
            pk: "0xada2d401ec3113060a049b5472550965f59423eaaeec3133dd33628e5df50491", 
            pkxy: ["0x27f9bc87a7fe674c14532699864907156753a8271a6e97b8f8b99a474ad2afdd",
                 "0x1104f55d8e6233dd3331ecaeea2394f565095572549b040a061331ec01d4a2ad"] },
                 { sk: "0x02d75fed474808cbacf1ff1e2455a30779839cfb32cd79e2020aa603094b80b7", 
                    pk: "0x52bd82819071b9b913aacfccc6657e5226d1aebd5e5ec4fbdea0b6f5bb2bdf12", 
                    pkxy: ["0x0fc2c87764783cdc883744c16712654ce3d0fccbea70c9ce379a8bc7f412f006", 
                        "0x12df2bbbf5b6a0defbc45e5ebdaed126527e65c6cccfaa13b9b971908182bd52"] }

        ];

        await TestZypherMock.connect(p1).initKey({x: keys[0].pkxy[0], y: keys[0].pkxy[1]},
            {x: keys[1].pkxy[0], y: keys[1].pkxy[1]})

        const jointKey = await TestZypherMock.jointkey()
            .then(m => m.map(bn => hre.ethers.toBeHex(bn)))
            .then(SE.public_compress);
        expect(jointKey).eq("0x9723835eb88d3c9e76f6d0c1295724e4f76fd0762568dee9a79394760510659d");

        SE.init_prover_key(deckSize)
        const pkc = SE.refresh_joint_key(jointKey, deckSize)
        
        await TestZypherMock.connect(p1).setPkc(pkc);

        
        const maskedCards = SE.init_masked_cards(jointKey, deckSize)
                              .map(({ card }:{card:any}) => card)
        
        const {
          cards: shuffledCards,
          proof,
        } = SE.shuffle_cards(jointKey, maskedCards)

        await TestZypherMock.shuffle(maskedCards,shuffledCards,proof);
    });

    it('Zypher Rust test',async()=>{
        const [_owner,p1,p2]=await hre.ethers.getSigners();
        const keys=[{ 
            sk: "0x020b31a672b203b71241031c8ea5e5a4ef133c57bcde822ac514e8a1c7f89124", 
            pk: "0xada2d401ec3113060a049b5472550965f59423eaaeec3133dd33628e5df50491", 
            pkxy: ["0x27f9bc87a7fe674c14532699864907156753a8271a6e97b8f8b99a474ad2afdd",
                 "0x1104f55d8e6233dd3331ecaeea2394f565095572549b040a061331ec01d4a2ad"] },
                 { sk: "0x02d75fed474808cbacf1ff1e2455a30779839cfb32cd79e2020aa603094b80b7", 
                    pk: "0x52bd82819071b9b913aacfccc6657e5226d1aebd5e5ec4fbdea0b6f5bb2bdf12", 
                    pkxy: ["0x0fc2c87764783cdc883744c16712654ce3d0fccbea70c9ce379a8bc7f412f006", 
                        "0x12df2bbbf5b6a0defbc45e5ebdaed126527e65c6cccfaa13b9b971908182bd52"] }

        ];

        await TestZypherMock.connect(p1).initKey({x: keys[0].pkxy[0], y: keys[0].pkxy[1]},
            {x: keys[1].pkxy[0], y: keys[1].pkxy[1]})

        const jointKey = await TestZypherMock.jointkey()
            .then(m => m.map(bn => hre.ethers.toBeHex(bn)))
            .then(SE.public_compress);
        const ref_joint_pk="0x9723835eb88d3c9e76f6d0c1295724e4f76fd0762568dee9a79394760510659d";
        
        expect(jointKey).eq(ref_joint_pk);

        SE.init_prover_key(deckSize)
        const pkc = SE.refresh_joint_key(jointKey, deckSize)
        
        await TestZypherMock.connect(p1).setPkc(pkc);

        const maskedCards = SE.init_masked_cards(jointKey, deckSize)
        .map(({ card }:{card:any}) => card)
        
        let ref_pkc=["0x2c28d5485bf5560982984967120f5d72994bab7d4515f8bee200139bc7f02774",
            "0x19296a4ba4870d47c10c52180d9c16eb6c866647f4b3cafda63955e64c0727b0",
            "0x1ef48b30d3b4ac4240a38f05dd8f4f46d300497561227238448e286fcf32aef6",
            "0x2ba9f581b493ad946808cfa8bfb87fa5f1e15c83a73009a01d70e1ebe345b148",
            "0x1728be2b9b1fa266c3cfb0b788fbe505781930c0e091ef78199b41d478259aa8",
            "0x07289b78c418c690c6d17d8259d0616f0e1e6158f74251f25062afb6ef89720f",
            "0x1849f699207034d3638a276b1ca79317a363aa43616f1ad4902aafd9ea8cebb4",
            "0x1b4bada6fad626ba90f889e80646e892dfde24178d0f0193337793bc17876aa5",
            "0x04cab23a63f618e2e6c06f7b60c3e69f65ccfbba544abc96402419983331e150",
            "0x00ffb0631a4cda988285aeb248ef71253e906f6301e5ccd697da33549785a989",
            "0x119ec51c3af0815592bd785f7377fee828ca752141307970c9115952f8d27fdb",
            "0x12f0058ad100d1e2c9e367c7aa51f693a6a273c44f3ff0606a8485d45d41d694",
            "0x01493616905dc7e5d30c4d594d04818da1ef73d8ad3b3b26bd750d48b03d1842",
            "0x2fc3b3f1a6faa0b5e50f6e5f8f1105ec17d6576af28ed31dcd280bb76ce6cf92",
            "0x01542cea6ad2259fecf0e7f6a9d50c55f05a926e00f138766439eaac9e97298b",
            "0x142b74a00df40ccf1c438b4cfdd64177b37f965dd52ebbf657708741888197e7",
            "0x2ec659fdf850de3062adc2d1cad5186b2d5c3dcef14693aaa2659ca6fd40b051",
            "0x08f54c229ca72449e4580ffc3a1a53414e9b361d6791605c21f39711a9c37921",
            "0x18c1ef8b1f2ac350cc12c7e6bc0a0d6e1f87992640e4facef6ba2fb4bed5aa75",
            "0x2408c75b89fe8ca84807565c202826bffe2fc816a93c03a3f67468643b7fcfa6",
            "0x1e3f5566634171266f306722824e2191cf425812abc9ceeefe9958d0d452d6df",
            "0x00df50e9ba8b3183f6049b2ae30dbbfefbbe112083315fec960c44c52fdf0fb2",
            "0x262599896f9ef09222892c46d3bcdab79a71f5b79dedd95c007a9fab94861a6a",
            "0x28e008842aa82ea15a37e59184a8e2dca06f40dd45c87c0c4e42c0320b3931f3"];
        expect(JSON.stringify(pkc)).eq(JSON.stringify(ref_pkc));
            
 
        const ref_shuffled_deck=["0x0c8c30aa9d5912008b72bd519d68aa7d2f9c07475ce569286299ff588514f615",
"0x286663d7a6aeea256f84698e7055cf06fc4159c7040239d3cf567715c22c1683",
"0x2b3b1cbbd95b7625a8480ad352292effa0987a3c3e0188dfde7a9990946db1ea",
"0x0a7b27e9ea63aa8a050b90dcda78b36b91240ed4bade38830b62142b5dc89018",
"0x098113270e06213730951459a1d69d7d07bf2ffd3fde266ef6a6b850858ef8a8",
"0x1017e370a3ecf326f99839dd52f4c68b09834b6e68b34b67356fb7b1c904fcf0",
"0x09ba4a93adbe3c41bbd59641fb408596787c538902204e03489cedc72f5715cc",
"0x10bacc1213ac1f966339b7cb3095eb4d14f8524d7c50336e2c358c47c9f7a179",
"0x2e3d2cf5bfa6a3e56b533507aaff6b78766fee4bfad2d3ca2d24dc10db118de5", "0x175931390d79d1a12fb8b5823a4bee3e790a018a2567d1b56002916d823021d9", "0x291943248f294544df715bc9d97f78d56eb2d968963d10d83f72d46df90cf1cc", "0x171f53cbf78973e15163ec9126e81dfd73e187e683ad6ad03050e36b16200e9b",

"0x120a93aec6f8e6887a5d477ed3f333a23003a498fb36f0833874f4bf95932251", "0x2ade7c5d241a9621de94aa3d28cb1e74934c9cd1549c6195f1440ca2e305b831", "0x272e2fb6e5838bb6895f91dec84dfbf12cfc20a1849858091af1a497eb9cd404", "0x1f60033b9ba2182247bb6f22443449fea2aba57cd0686b94e19e40fce7933a85",

"0x25987af31ff4db404cb1d543aad95581a1d93159d0c1ba46c277296a7bec3ac7", "0x01c75ab2a798e67ca00055039547cdee96acb4ab41bed7144dddd8bfa8cb8377", "0x17f4fb506978c978156f9854158ade93ac12521bac4cb9ce449afeb2e0e493b1", "0x1ac07a1670b2453d094e9902640d6c733a35a2fa0775d4d5dd414c65140b7e37",

"0x2c86242f3e83e0288b7e9f06cdb792159ab10eea1213e49fbbb3a542267e7eeb", "0x22fab80716562721f17a851204c2cefcbcb8a6ca92dbfccabcb6ffff27509647", "0x18bcd4c24091b2d24fe5f7d45e5b516e6c7f8b77e1f14226588729d670a2c823", "0x2c6b5b2eafed6946aeacd923f8a1e7e8f67c1b25249d53ad00391592ab83daba",

"0x24971411a196db6da3fd4bfd1b8ab63506284b2616d8ddbb16f06453eb49d9cd", "0x1cfe9f55653bc9636aa4e13f18850e18dea93b91e787289a16c2de123e5bd506", "0x1436ca11b22bed7e9d1e6d83c758325a59052bc711a797de9341b0ece81b810b", "0x067377dcc682eb6346e4b66e549ffda4bbce2290ea8dae7e2f3ac9c1cfcc8e66",

"0x0323d037c752be27e6a89c47a4bf1b451ed2fd63d22ea30037322ce67354a976", "0x2db3c2041f551eb5fb746329c1068eeecfdd8fe56e405465657896a363986b17", "0x185ef069825c95d3fa5765b6d5b6fc183d8f700d0590b8b15e83f53d5dc20564", "0x2f294eae0363d2ca3343781dfc665fafd36d67430c6df899f863bf9a27105c91",

"0x0feeac33f63462d5c4689b2c5011bfb6b38d7a5171da85079a3d1055f374cd7a", "0x2ea21fbe75b9cab61f4c3fabc86038476639a672e1aa980d4d09dcf2be0e45e0", "0x15c0d5ef41b59ae8556aacf75b954e170e40f8e31ed027e375c1b87f1e49db1a", "0x1166adda5759942f5b0f2f067f79e01fdc88ecb93f735afabf45ffc5c0fc45c5",

"0x27c0440f57a8f1dbf9bd2bb8faedf7c65d10f55abc19e7c0e5dc39e946d9a4bd", "0x0eb919bf5e743ff44c13b432dc5c1df3cd03af7b5690bd62a93be6fbb8ee2ee3", "0x03b628137feb55a728bf1b47edd39ea0949b6553dc25bde7c5b5578e61c9d68d", "0x13821c554cabf2d1e8a98ce1811b9fb098ca3e4cb32a53610b088ff49f92b574",

"0x24e32722fdc981645089c51a1eec01d51b325ec8a058115351f0a382fa977106", "0x2ff072de57b784a42f97a4c7fab4e74a87f68acf93669fdacb5fa1eb997d158e", "0x03a5f3a146281a373e52da3faa2442ae4a8b78ab30690e60a9c7af3b85848c30", "0x2e622b3e62df34c4e558a9841d1542ee31f3017c407ec5b1ba2f3231eb284b3c",

"0x02feedd9d49c249a25afbd03181c7b9f5d52bc9791ca1a8294509066652984e2", "0x27a665bdbb9f3415020c12e37026bef1de7458e6944a0c0c8d5fb95d16af2ed1", "0x2fa2917d2d7b8340c95b598623a6c771e8dc84ac4231ba5502cd4635c30006a7", "0x252ecaf14a6dceef6fab3ca7d418cc4aed62620d388191c101e5dce418678f92",

"0x2387d030e7d9793c0f6b0b7f6279b08144a76a571f6fab292ca65cef4024433c", "0x2bfe50011dec6dbb85389b0db6583d7603db9e91d4cbdabf48aa94fb1496e803", "0x023251677c87e0a79adf71e9bfb02bc8ce4248343ac27e9a9b14bc450b4b5f61", "0x07833d5eea6bd61d360da49df4e5dccc6a852a6da74024c1e556e74f0f2907d5",

"0x22774bd795d0eea49a3ee0a37963732d51d7b4e49002d14b1dd8edbd39fff337", "0x07bfb803586fd467ea5b9b832ca75703f012b21cf43ddf22a2808de8324d666b", "0x10ce4444c63b17da1dfec3fdd63569ec0a9f463d9b4b68b7f986ab13d9159cd2", "0x0393993e6c5d491eff0abd9f2f192b994979f8dd51be1e6d85bad71d5025dfee",

"0x14b27288f81b7631c01632ad4d6d5a4a99bb2433419a75c5ebe3f94455f2484b", "0x089d8d6940f2731f64b952b8aac91dbae28c501114bbf252f4a53809bc71a901", "0x266606d8245af649272fa542ec6ac89074a08b17f8fa2c3527ad1b4b21890dd0", "0x2ec8f9a7b167ebc120fc24e9770d2e676256b700ae2786075871353ca2f00634",

"0x2a9e2f6c23c3797ce180686c39dd10a56de7160132559ec38b929cb9cffb780a", "0x1dd14eb2eb96f073ae208f947b90403abd48e991a096200baadc3ca9e30e5e20", "0x22beee9cbfcab9ef782d9d4d7c7688e5a921ae7e92464b34a3793e28c2199aba", "0x291de468b04782801adfe85e3bc601d7cbfcf95dce0aa9ec698da78c11b9ea77",

"0x0cfeaecf977de2c037872bad80f3c44a79750a0b68b9e1ed4156b8ac04697ec9", "0x0054ac09245a8f6998fb25e15df91a60c609c198f4247bb281f6e002f654662e", "0x22f8c64e7ca300986eb71ce3651b8711d28cf5ecb80c7f435a363a2142c9fb58", "0x00313eb97c75efb0ce16e8bd089e1c3e0d4bffcda107040c670a3705c56a4cc3",

"0x073eba402f69f69fcb75114ad87b08ec1005efc0e6e79b1be683dbc7dc4f38ca", "0x164fe983f5482ebf78eb4fe69823da360e32c2e83e672d9b18e851e6fb6f049a", "0x20896b83bbebec5ec8556bc7056f66ef618140aa2f6dc817611a12ef943e6325", "0x19bcaf48875b2252934c2ec4cedde079b17f53fdb2dc08e14d31c893376d97c5",

"0x243405f22b2d200d63bddd2aa01da99f4e55b7be845707ef1ae004731c576b19", "0x015c38220d055f0f1f58565d1b5bec920062693c944ee8561bedf5899ac637e0", "0x2f98fd71fdd1e2e557b3e10286c247e37d7a2e922a31c10e8c6d517670627387", "0x02a3e1be696117dade34a7a15601708531fc71f69e4d5dedde9e8ad77ad2a3c3",

"0x2674796c02c38f3f09df70dff018b5446abf5157c63f2f0b676b23f59e821619", "0x23dd3a933862aefb694ecd28bda13325886085b0fab2023e81cee16994d48ef3", "0x074e6efd469015251bed4c7152d491521393a9985be8eb88456798cdd3f931cd", "0x20e62387b8f48671bb39b8b331d306202a6dec3dc4f08c7000390644867cc19c"]
            
        const ref_masked_deck=["0x218ce9bf8e71ec0e86503b7c5bb6dc41a8555e2f831aa06baa50fa2fecce1cfa",
"0x27290ca3bad842546c971f8aa3b13b84300fec5ea9d8d2045b055f2f4031abc9",
"0x2b8cfd91b905cae31d41e7dedf4a927ee3bc429aad7e344d59d2810d82876c32",
"0x2aaa6c24a758209e90aced1f10277b762a7c1115dbc0e16ac276fc2c671a861f",
"0x22819234aa9c6645b6982a027eab08fdc736cc3ebd270ffc59e29a3ca85bb4a6",
"0x257b39c39fd1b30cf4c72b5a549772e53f560c45c3dd8735bbe9d425c9913a6d",
"0x2b8cfd91b905cae31d41e7dedf4a927ee3bc429aad7e344d59d2810d82876c32",
"0x2aaa6c24a758209e90aced1f10277b762a7c1115dbc0e16ac276fc2c671a861f",
"0x2070d8b05ef7e4360c7cd120e7b21aca02df363ff87eefb37b3718b2f73cf987",
"0x1a0606f39e33eb502189ec1d87de6dc35a24b4b26ecccdcbf1d8fe1540d8e18f",
"0x2b8cfd91b905cae31d41e7dedf4a927ee3bc429aad7e344d59d2810d82876c32",
"0x2aaa6c24a758209e90aced1f10277b762a7c1115dbc0e16ac276fc2c671a861f",
"0x01b489dcbaf3372c8b586ac3f9a1e366333dc158c53440116b3f7380a4aeb87a",
"0x019dadf830f711e7b65aa6a8b059867188a959d7599becde5ffa5147738b8294",
"0x2b8cfd91b905cae31d41e7dedf4a927ee3bc429aad7e344d59d2810d82876c32",
"0x2aaa6c24a758209e90aced1f10277b762a7c1115dbc0e16ac276fc2c671a861f",
"0x1245544e952faf04fddb969fcd5310a916bbe5fec9e925ef1b7a5d9efce743c6",
"0x1c3d03003cdc88361800f6e0033e53157cac88bd99f52937e74a476671e54f4f",
"0x2b8cfd91b905cae31d41e7dedf4a927ee3bc429aad7e344d59d2810d82876c32",
"0x2aaa6c24a758209e90aced1f10277b762a7c1115dbc0e16ac276fc2c671a861f",
"0x11c5bd3206781b352bf662197d273b6e921742f8f018400a6b55224dd3529e3e",
"0x09c2d2981a44eadf340d34c38d04c0134af9c51593ca3836bd463e0ff8c9455f",
"0x2b8cfd91b905cae31d41e7dedf4a927ee3bc429aad7e344d59d2810d82876c32",
"0x2aaa6c24a758209e90aced1f10277b762a7c1115dbc0e16ac276fc2c671a861f",
"0x25d0b32f3611bc80cd293fda04e398d7fe97cf08fffaa2dc1857ce7e54caa900",
"0x08ca5c823686ae0e899a19f6a02ba9433b9aff14d38b6b2d2a4e2e77b35bb09a",
"0x2b8cfd91b905cae31d41e7dedf4a927ee3bc429aad7e344d59d2810d82876c32",
"0x2aaa6c24a758209e90aced1f10277b762a7c1115dbc0e16ac276fc2c671a861f",
"0x03fea0d63e1b2638e629e4a62851358de6756ec2654929435a83ac79e27d9d76",
"0x0f4057aa149c2789580ca13e13f58f5bc560401de0cf84fe40245797690dcb64",
"0x2b8cfd91b905cae31d41e7dedf4a927ee3bc429aad7e344d59d2810d82876c32",
"0x2aaa6c24a758209e90aced1f10277b762a7c1115dbc0e16ac276fc2c671a861f",
"0x08c194c6edfa0e5817e2512ed9fa1f9a31176f33054c43a0f09c82921b277d11",
"0x02cf1852c4d3c70254925809cc3b3e471352cae7cd7a02972a4fbc25e49ff8d2",
"0x2b8cfd91b905cae31d41e7dedf4a927ee3bc429aad7e344d59d2810d82876c32",
"0x2aaa6c24a758209e90aced1f10277b762a7c1115dbc0e16ac276fc2c671a861f",
"0x2b76968337a76cd315ff36759c2afed4156079ce8d03bf8e1a99d56af60dfee4",
"0x12804496f72a370a83a3c0e200c0406768a4865c6c966b1048831800b4bdfa04",
"0x2b8cfd91b905cae31d41e7dedf4a927ee3bc429aad7e344d59d2810d82876c32",
"0x2aaa6c24a758209e90aced1f10277b762a7c1115dbc0e16ac276fc2c671a861f",
"0x163a252b384d0bc1c62ace71d7c98d833d0aa5596f152a90615a26a7a39ae3ec",
"0x164ca5f144bbc192e71168dbc0619ec1f570634fdfb72b01c88039f75596f10d",
"0x2b8cfd91b905cae31d41e7dedf4a927ee3bc429aad7e344d59d2810d82876c32",
"0x2aaa6c24a758209e90aced1f10277b762a7c1115dbc0e16ac276fc2c671a861f",
"0x07b06e605534b3e89ed492a5017a62eb5753c2d64357feb4118a8e057cb8c2ae",
"0x1161d9cd4e7180afbf6c65add16bf1bc8cc3e3774d93341ddd265a2739e03fca",
"0x2b8cfd91b905cae31d41e7dedf4a927ee3bc429aad7e344d59d2810d82876c32",
"0x2aaa6c24a758209e90aced1f10277b762a7c1115dbc0e16ac276fc2c671a861f",
"0x2be54ccd8a27e7196eafa05d387ad2748fc828aa7f8230668eb598b41d692a6e",
"0x1733013b4152066f4a38b6c75484b7669c71418ca59f7ac32e9c1c393f3b3738",
"0x2b8cfd91b905cae31d41e7dedf4a927ee3bc429aad7e344d59d2810d82876c32",
"0x2aaa6c24a758209e90aced1f10277b762a7c1115dbc0e16ac276fc2c671a861f",
"0x2b4ed7d39ae55cd435fda64709e2d6ce9a5d7d8519a2e6e6a8f71e80d83942b7",
"0x2d9a5a442767f61165dad8677c89abaa167b35a67b0baa1f5b6a871aa97165ba",
"0x2b8cfd91b905cae31d41e7dedf4a927ee3bc429aad7e344d59d2810d82876c32",
"0x2aaa6c24a758209e90aced1f10277b762a7c1115dbc0e16ac276fc2c671a861f",
"0x04aacf4835d4c2d46260ef14fa8539566eaf58e5d00c71b1b80fa5e3bc522976",
"0x2c5746f4ba6c4dc80147c39e518dfeca2faab87182d194a541fb9942b285685f",
"0x2b8cfd91b905cae31d41e7dedf4a927ee3bc429aad7e344d59d2810d82876c32",
"0x2aaa6c24a758209e90aced1f10277b762a7c1115dbc0e16ac276fc2c671a861f",
"0x12cfe6586c85accf57b0a4cc08fa5c9c307f71bdd6fac33b181292fde4f05395",
"0x29d54126f5269094fb9f59e3e2ce5ea8c100af040a372a62f35d75c1f2105093",
"0x2b8cfd91b905cae31d41e7dedf4a927ee3bc429aad7e344d59d2810d82876c32",
"0x2aaa6c24a758209e90aced1f10277b762a7c1115dbc0e16ac276fc2c671a861f",
"0x0c9ca759a8334bb3691b7d106e0a8dfef33d59e62d5dea7581ecef987b367ed5",
"0x20c9b1fb4a0999d297372e401d0376909592433fec0c507250bd4dc68d5a2322",
"0x2b8cfd91b905cae31d41e7dedf4a927ee3bc429aad7e344d59d2810d82876c32",
"0x2aaa6c24a758209e90aced1f10277b762a7c1115dbc0e16ac276fc2c671a861f",
"0x2aa4a6dd47dcef8ba03c5779761d13e89e261fa138f2251becf9e48cfd482a27",
"0x24e6bfa0b8e7534f65c02d03e1c2cb0c07fcce8e6b938c0b559b076636f283a5",
"0x2b8cfd91b905cae31d41e7dedf4a927ee3bc429aad7e344d59d2810d82876c32",
"0x2aaa6c24a758209e90aced1f10277b762a7c1115dbc0e16ac276fc2c671a861f",
"0x0e49c4014b9fb094c591c9f60b2c1353006ce06a044929307ed842c09f443d92",
"0x102fd4ae1270abb425d492ea44bcae028ca21afba81fd58a1533e382f99d58a8",
"0x2b8cfd91b905cae31d41e7dedf4a927ee3bc429aad7e344d59d2810d82876c32",
"0x2aaa6c24a758209e90aced1f10277b762a7c1115dbc0e16ac276fc2c671a861f",
"0x0e00e37a909c62c8202a8e730053c66078f0a95fa0c3561c5b1d3f16a0d6ddd6",
"0x1fdb4022b40dd1c88c830c1268f1bffe2f09b07e09b8a6b8bac6f30d4bec45e0",
"0x2b8cfd91b905cae31d41e7dedf4a927ee3bc429aad7e344d59d2810d82876c32",
"0x2aaa6c24a758209e90aced1f10277b762a7c1115dbc0e16ac276fc2c671a861f"];
            
        const ref_proof="0x0e14154f12595c3a7ac35671e1b7f242c3d63e8e35df53fe054677d02f5de39b17aa8fcd319210e083566847c9c6a2cb1ba5c6aabeadb4c0e764237985b0c8f90feee4b379773174ea3badaa9dcfc3e4b3941f015ac4a88f1c1ce92abcdc9c6811ce61a4505d3fbbf5fdb4f0a08dda8f053ecab36a12a208ed1d8205d5ed3f6e250d413867ecb6bd2acb0924226ebe36a4842070cde2af02a588811e9ba9a259073e928b5b2cba23aa57487aff83fb340da8639198f0572b91f9b55fba3fd19d2b0fd39ead64c0f6f1ff9a01de499656d1b74d2c36566ede0cbd12b44f4a9b76198a66702a86b79b83777a4ac35199a0dbd88eeb9f3d4bebfe5dc2a937ab936014d1865b8f932f230f42d31464a9c4d67e518b14e3718ba416afc7e1e852dae4288013d598df9f77392fd7af17966c37e0d02e0f5e544cd49220c0b13b44104c20b28f1e51c81c1e26eb379552ba583e93a21aa43695838c68dd8c95f2334a651e1f57e3dba56f16ce0fb1949d48692cceec58075f7ad8ebbeffcc3885bd3c1c2a2ba6981ac22a755cbdef99cf15a5da51b66238f35e81c285acf2415550a7832dc9fe1b80966539a58379116f5bc1d2f133556e982472456d57d5f5461ef92e2b57f5c93b0230e5aaf36aa3cc20b9fda82649482c1fc0e89e0509778d41f8cd26b223ceb2ff8cfe6079d35668b33615df23a96fa3bf9e1d5826e5e228f7e14d1515f8ec5e2c3533b8b1d6cdb29e589609352b651935bf71ff8f0a9c858e4fea1b7c6c875dbae61c0afc0c9f2f07c7b947403c21551b43d3eb7e04d57c017074108048a6b41b41d9c575bb5eb5022da62a207c637698b0cc9cbbb80fe147e4062c5f6ce190cae924e48d9f915d05ea3e7d0e67f037d9a034ef166839accc35040c316598a4327ef592d8e7f60353d1432354af8c5f05f5a2a0ff953f724ef6972c3354a9af19161553f727f58ce0e1108a63b4d592b309884a1e0810e2a2a5341cdd84e2a0297bd2d670a4ee5be531e000731107ceec914221d07bb5dfc2c7fa29bfd01e2f72441efe44401b93515439fcaf0de851b755e5d7c2e363acc63eaf2066bcd4afb364e352a1ed95c0faa9ce7b07a8e06615ae295884a08a7dc5c01b069b218411eb286d3889ba7d7ce4a4339444ae509fd9dcc5d0ae69bf1a674ce317df76ebb90c436063567d48c253faa981b7e3bd1dab2f575d7af66f4a4482590d8e7c225eb47db5c9b66018323038eeb46a2dfc4493f0bed23e7e3dd493e8f7000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003046278d7a7b05fd5e94f8c199ff69b4b998b09b29e46fe7469ac9abe975bd4221ffec5075c9766cc6647b9c2f09dd2abd2038619d075021b07d1e314ade95170add1f4c5d6a876d88cd64831e827ff30ff9233dbbb23bc5ab81d7aaa35909552ba661f76c0234f2b993211eb8d3a8ee42b07e2b599761581721f357a4f2343a2e9a1b1e400fb5301665939f8ff8bc63685172b13437f5d9a554eac1b1c2ab8a117d8f480acda92f79148353153a93ff42d074f083637c2ee9249beadce5efe5173b264c93ab948f6ed7d5f5fdae848ef5dd522aae849ec9dc06dcee21a7a3b4111d526258c8116db39ae10bb6f9de6ab6b805c6c1d653d6bbfd833f624ed17a0f5b4fbb9275eb1838054fa7f4853c568fd3867a751511aaaf15c211cd46846c22b79c308e8b6713678ae3b94c2e2b711a77a84954eedb3f2997621cdd4e508d2a565d106ddcd7c622915f134c2b1ed3ed3abac31e443a4667f189027aaaef401ef452996d49dbe7ed398f75678456b37a335b3373b734dd99be0e140a29150d1dbf0b9add9ba4a7fd0e185478044bbef1f29abe50a6040527f433388f9fba04125a8d3a3fc0b1064115add3fb01d429a6f80cecb53b0a82b9c1acbd95b997771eee08ab308f19bd13c5366133969b91a8d820aab6b3adf72e1729b46f7ba3cc19e0cef9f06f5ba1127f403f4fc908b6487ce7796698954fd876306d2934ecf41dbee402228a06965a9352634de94e6f45a02b60edb69aca1f6ed7eabaff2c461ca96c2d337dcc06d5d16edc660c030662da915a6bd779fedd4c1bc951ae40dd0c3472decd77f027454103e0a78ab5285e759e359746262796480fd260d228a62f5df36c912ddbb91e314a53a183ce4d25bdcbb3f42e090f9e93aae82ce5cafe0eddf33cfb4536e306903647afadd2e2710bd0092cfed16a212b179d6aeac571";
            
        
        const shuffleCardsNew:[BigNumberish,BigNumberish,BigNumberish,BigNumberish,][]=[];
        const maskedCardsNew: [BigNumberish,BigNumberish,BigNumberish,BigNumberish,][]=[];
        for(var i=0;i<ref_shuffled_deck.length;i+=4){
            shuffleCardsNew.push([ref_shuffled_deck[i+0],
                ref_shuffled_deck[i+1],
                ref_shuffled_deck[i+2],
                ref_shuffled_deck[i+3]])
        }
        for(var i=0;i<ref_masked_deck.length;i+=4){
            maskedCardsNew.push([ref_masked_deck[i+0],
                ref_masked_deck[i+1],
                ref_masked_deck[i+2],
                ref_masked_deck[i+3]])
        }
        
        expect(JSON.stringify(maskedCardsNew)).eq(JSON.stringify(maskedCards));
        
        //Both below are coming false but should be true
        expect(SE.verify_shuffled_cards(maskedCardsNew,shuffleCardsNew,ref_proof)).eq(true)
        await TestZypherMock.shuffle(maskedCardsNew ,shuffleCardsNew ,ref_proof);
    });
});